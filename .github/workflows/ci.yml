name: CI AutoZen Pipeline with Cross-Browser Testing

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  test:
    name: Test on ${{ matrix.browser }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - browser: chrome
            os: ubuntu-latest
          - browser: firefox
            os: ubuntu-latest
          - browser: edge
            os: ubuntu-latest
          - browser: safari
            os: macos-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Cache Maven Packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      # ‚úÖ Ensure required browsers exist
      - name: Install Browsers (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "üß© Ensuring browsers are installed..."
          sudo apt-get update -qq
          sudo apt-get install -y firefox
          sudo apt-get install -y google-chrome-stable || true

      # ---------- Chrome ----------
      - name: Setup Chrome
        if: matrix.browser == 'chrome'
        uses: browser-actions/setup-chrome@v1

      - name: Setup ChromeDriver
        if: matrix.browser == 'chrome'
        uses: nanasess/setup-chromedriver@v2

      # ---------- Firefox ----------
      - name: Setup Firefox
        if: matrix.browser == 'firefox'
        uses: browser-actions/setup-firefox@v1

      - name: Setup GeckoDriver
        if: matrix.browser == 'firefox'
        uses: browser-actions/setup-geckodriver@v1

      # ---------- Edge ----------
      - name: Setup Microsoft Edge & Driver (Resilient)
        if: matrix.browser == 'edge'
        shell: bash
        run: |
          echo "üü¶ Installing Microsoft Edge and EdgeDriver..."
          sudo apt-get update -qq
          sudo apt-get install -y curl unzip jq gpg apt-transport-https
          curl -fsSL https://packages.microsoft.com/keys/microsoft.asc | sudo gpg --dearmor -o /usr/share/keyrings/microsoft.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft.gpg] https://packages.microsoft.com/repos/edge stable main" | sudo tee /etc/apt/sources.list.d/microsoft-edge.list > /dev/null
          sudo apt-get update -qq
          sudo apt-get install -y microsoft-edge-stable
          EDGE_VERSION=$(microsoft-edge-stable --version | awk '{print $NF}')
          echo "‚úÖ Edge version: $EDGE_VERSION"

      # ---------- Safari ----------
      - name: Enable Safari Driver
        if: matrix.browser == 'safari'
        run: |
          echo "Enabling SafariDriver..."
          sudo safaridriver --enable
          safaridriver --version || true

      # ---------- Display Versions ----------
      - name: Display Browser Versions
        run: |
          echo "---- Browser & Driver Versions ----"
          case "${{ matrix.browser }}" in
            chrome)
              google-chrome --version || google-chrome-stable --version
              chromedriver --version
              ;;
            firefox)
              firefox --version
              geckodriver --version
              ;;
            edge)
              microsoft-edge-stable --version
              msedgedriver --version || echo "‚ö†Ô∏è EdgeDriver not available"
              ;;
            safari)
              safaridriver --version
              ;;
          esac

      # ---------- Run Tests ----------
      - name: Run Tests with Maven (${{ matrix.browser }})
        run: mvn clean test -Dmaven.test.failure.ignore=true -Dbrowser=${{ matrix.browser }} -Dheadless=true
        env:
          TESTRAIL_ENABLED: "true"
          TESTRAIL_URL: ${{ secrets.TESTRAIL_URL }}
          TESTRAIL_USER: ${{ secrets.TESTRAIL_USER }}
          TESTRAIL_API_KEY: ${{ secrets.TESTRAIL_API_KEY }}
          TESTRAIL_PROJECT_ID: ${{ secrets.TESTRAIL_PROJECT_ID }}
          TESTRAIL_RUN_ID: ${{ secrets.TESTRAIL_RUN_ID }}
          BASE_URL: ${{ secrets.BASE_URL }}
          BROWSER: ${{ matrix.browser }}

      # ---------- Post-Test Logs ----------
      - name: Show Failing Tests Summary
        if: always()
        run: |
          echo "---------------------------------------"
          echo "üß™ FAILED TEST SUMMARY for ${{ matrix.browser }}"
          echo "---------------------------------------"
          grep -i "FAILED" target/surefire-reports/*.txt || echo "‚úÖ No failed tests detected"
          echo "---------------------------------------"

      # ---------- Artifacts ----------
      - name: Upload Test Reports (${{ matrix.browser }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-${{ matrix.browser }}-${{ matrix.os }}
          path: |
            reports/
            target/cucumber-reports/
            target/surefire-reports/
            target/extent-report/
          retention-days: 30

      - name: Upload Screenshots (${{ matrix.browser }})
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots-${{ matrix.browser }}-${{ matrix.os }}
          path: screenshots/
          retention-days: 7

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test]
    if: always()
    steps:
      - run: |
          echo "üéØ Cross-browser test runs completed!"
          echo "‚úÖ Reports and screenshots uploaded."
