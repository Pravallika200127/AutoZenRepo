name: CI AutoZen Pipeline with Cross-Browser Testing

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  test:
    name: Test on ${{ matrix.browser }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - browser: chrome
            os: ubuntu-latest
          - browser: firefox
            os: ubuntu-latest
          - browser: edge
            os: ubuntu-latest
          - browser: safari
            os: macos-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Cache Maven Packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      # ✅ Ensure required browsers exist
      - name: Install Browsers (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "🧩 Ensuring browsers are installed..."
          sudo apt-get update -qq
          sudo apt-get install -y firefox
          sudo apt-get install -y google-chrome-stable || true

      # ---------- Chrome ----------
      - name: Setup Chrome
        if: matrix.browser == 'chrome'
        uses: browser-actions/setup-chrome@v1

      - name: Setup ChromeDriver
        if: matrix.browser == 'chrome'
        uses: nanasess/setup-chromedriver@v2

      # ---------- Firefox ----------
      - name: Setup Firefox
        if: matrix.browser == 'firefox'
        uses: browser-actions/setup-firefox@v1

      - name: Setup GeckoDriver
        if: matrix.browser == 'firefox'
        run: |
          echo "🦊 Installing GeckoDriver..."
          # Get latest GeckoDriver version
          GECKODRIVER_VERSION=$(curl -s https://api.github.com/repos/mozilla/geckodriver/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')
          echo "GeckoDriver version: $GECKODRIVER_VERSION"
          
          # Download and install
          wget -q "https://github.com/mozilla/geckodriver/releases/download/${GECKODRIVER_VERSION}/geckodriver-${GECKODRIVER_VERSION}-linux64.tar.gz"
          tar -xzf "geckodriver-${GECKODRIVER_VERSION}-linux64.tar.gz"
          sudo mv geckodriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/geckodriver
          geckodriver --version
          echo "✅ GeckoDriver installed successfully"

      # ---------- Edge ----------
      - name: Setup Microsoft Edge & EdgeDriver
        if: matrix.browser == 'edge'
        shell: bash
        run: |
          echo "🟦 Installing Microsoft Edge and EdgeDriver..."
          sudo apt-get update -qq
          sudo apt-get install -y curl unzip jq gpg apt-transport-https
          
          # Install Edge Browser
          curl -fsSL https://packages.microsoft.com/keys/microsoft.asc | sudo gpg --dearmor -o /usr/share/keyrings/microsoft.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft.gpg] https://packages.microsoft.com/repos/edge stable main" | sudo tee /etc/apt/sources.list.d/microsoft-edge.list > /dev/null
          sudo apt-get update -qq
          sudo apt-get install -y microsoft-edge-stable
          
          EDGE_VERSION=$(microsoft-edge-stable --version | awk '{print $NF}')
          echo "✅ Edge version: $EDGE_VERSION"
          
          # Install EdgeDriver
          echo "📥 Downloading EdgeDriver..."
          DRIVER_VERSION=$(curl -s "https://msedgedriver.azureedge.net/LATEST_STABLE")
          echo "EdgeDriver version: $DRIVER_VERSION"
          wget -q "https://msedgedriver.azureedge.net/${DRIVER_VERSION}/edgedriver_linux64.zip" -O edgedriver.zip
          unzip -q edgedriver.zip
          sudo mv msedgedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/msedgedriver
          msedgedriver --version
          echo "✅ EdgeDriver installed successfully"

      # ---------- Safari ----------
      - name: Enable Safari Driver
        if: matrix.browser == 'safari'
        run: |
          echo "🧭 Enabling SafariDriver..."
          sudo safaridriver --enable
          safaridriver --version || true

      # ---------- Display Versions ----------
      - name: Display Browser Versions
        run: |
          echo "===================================="
          echo "🌐 Browser & Driver Versions"
          echo "===================================="
          case "${{ matrix.browser }}" in
            chrome)
              echo "Chrome:"
              google-chrome --version || google-chrome-stable --version
              echo "ChromeDriver:"
              chromedriver --version
              ;;
            firefox)
              echo "Firefox:"
              firefox --version
              echo "GeckoDriver:"
              geckodriver --version
              ;;
            edge)
              echo "Edge:"
              microsoft-edge-stable --version
              echo "EdgeDriver:"
              msedgedriver --version || echo "⚠️ EdgeDriver not available"
              ;;
            safari)
              echo "Safari:"
              safaridriver --version
              ;;
          esac
          echo "===================================="

      # ---------- Run Tests ----------
      - name: Run Tests with Maven (${{ matrix.browser }})
        run: mvn clean test -Dbrowser=${{ matrix.browser }} -Dheadless=true
        continue-on-error: true
        env:
          TESTRAIL_ENABLED: "true"
          TESTRAIL_URL: ${{ secrets.TESTRAIL_URL }}
          TESTRAIL_USER: ${{ secrets.TESTRAIL_USER }}
          TESTRAIL_API_KEY: ${{ secrets.TESTRAIL_API_KEY }}
          TESTRAIL_PROJECT_ID: ${{ secrets.TESTRAIL_PROJECT_ID }}
          TESTRAIL_RUN_ID: ${{ secrets.TESTRAIL_RUN_ID }}
          BASE_URL: ${{ secrets.BASE_URL }}
          BROWSER: ${{ matrix.browser }}

      # ---------- Post-Test Logs ----------
      - name: Show Failing Tests Summary
        if: always()
        run: |
          echo "======================================="
          echo "🧪 TEST RESULTS for ${{ matrix.browser }}"
          echo "======================================="
          echo ""
          echo "📄 Surefire Reports:"
          echo "---------------------------------------"
          find target/surefire-reports -name "*.txt" -exec echo "File: {}" \; -exec cat {} \; 2>/dev/null || echo "⚠️ No .txt reports found"
          echo ""
          echo "---------------------------------------"
          echo "📊 XML Reports Summary:"
          echo "---------------------------------------"
          find target/surefire-reports -name "*.xml" -exec grep -H "failures\|errors" {} \; 2>/dev/null || echo "⚠️ No .xml reports found"
          echo ""
          echo "---------------------------------------"
          echo "📋 Test Counts:"
          grep -h "Tests run:" target/surefire-reports/*.txt 2>/dev/null || echo "No test summary found"
          echo "======================================="

      # ---------- Artifacts ----------
      - name: Upload Test Reports (${{ matrix.browser }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-${{ matrix.browser }}-${{ matrix.os }}
          path: |
            reports/
            target/cucumber-reports/
            target/surefire-reports/
            target/extent-report/
          retention-days: 30

      - name: Upload Screenshots (${{ matrix.browser }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots-${{ matrix.browser }}-${{ matrix.os }}
          path: screenshots/
          retention-days: 7
          if-no-files-found: ignore

      # ---------- Fail job if tests failed ----------
      - name: Check Test Results
        if: always()
        run: |
          if grep -q "Failures: [1-9]" target/surefire-reports/*.txt 2>/dev/null; then
            echo "❌ Tests failed for ${{ matrix.browser }}"
            exit 1
          elif grep -q "Errors: [1-9]" target/surefire-reports/*.txt 2>/dev/null; then
            echo "❌ Tests had errors for ${{ matrix.browser }}"
            exit 1
          else
            echo "✅ All tests passed for ${{ matrix.browser }}"
          fi

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test]
    if: always()
    steps:
      - name: Check Test Results
        run: |
          echo "🎯 Cross-browser test runs completed!"
          if [ "${{ needs.test.result }}" == "failure" ]; then
            echo "❌ Some tests failed. Check the artifacts for details."
            exit 1
          else
            echo "✅ All tests passed!"
          fi
