# Robust CI for Chrome, Firefox, Edge, Safari
name: CI AutoZen Pipeline with Cross-Browser Testing

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  test:
    name: Test on ${{ matrix.browser }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - browser: chrome
            os: ubuntu-latest
            browser-version: stable
          - browser: firefox
            os: ubuntu-latest
            browser-version: latest
          - browser: edge
            os: ubuntu-latest
            browser-version: stable
          - browser: safari
            os: macos-latest
            browser-version: system

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Cache Maven Packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Setup Firefox
        if: matrix.browser == 'firefox'
        uses: browser-actions/setup-firefox@v1
        with:
          firefox-version: ${{ matrix.browser-version }}

      - name: Setup Edge
        if: matrix.browser == 'edge'
        run: |
          EDGE_BIN=$(command -v microsoft-edge || command -v microsoft-edge-stable || command -v msedge || true)
          if [ -n "$EDGE_BIN" ]; then
            EDGE_VERSION=$($EDGE_BIN --version | awk '{print $NF}')
            MAJOR=$(echo "$EDGE_VERSION" | cut -d. -f1)
            DRIVER_VERSION=$(wget -qO- "https://msedgedriver.azureedge.net/LATEST_RELEASE_${MAJOR}" 2>/dev/null || true)
          fi
          if [ -z "${DRIVER_VERSION:-}" ]; then
            DRIVER_VERSION=$(wget -qO- "https://msedgedriver.azureedge.net/LATEST_RELEASE" 2>/dev/null || curl -sS "https://msedgedriver.azureedge.net/LATEST_RELEASE" 2>/dev/null || true)
          fi
          echo "EdgeDriver version to download: ${DRIVER_VERSION}"
          echo "DRIVER_VERSION=${DRIVER_VERSION}" >> $GITHUB_ENV

      - name: Enable Safari Driver
        if: matrix.browser == 'safari'
        run: |
          sudo safaridriver --enable
          safaridriver --version || true

      - name: Setup ChromeDriver
        if: matrix.browser == 'chrome'
        uses: nanasess/setup-chromedriver@v2

      - name: Setup GeckoDriver
        if: matrix.browser == 'firefox'
        uses: browser-actions/setup-geckodriver@latest

      - name: Setup EdgeDriver
        if: matrix.browser == 'edge'
        run: |
          set -euo pipefail
          DRIVER_VERSION=${{ env.DRIVER_VERSION }}
          if [ -z "${DRIVER_VERSION:-}" ] || [ "${DRIVER_VERSION}" = "null" ]; then
            DRIVER_VERSION=$(wget -qO- "https://msedgedriver.azureedge.net/LATEST_RELEASE_"${MAJOR} 2>/dev/null || wget -qO- "https://msedgedriver.azureedge.net/LATEST_RELEASE" 2>/dev/null || true)
          fi
          if [ -z "${DRIVER_VERSION:-}" ]; then
            DRIVER_VERSION=$(curl -sS "https://msedgedriver.azureedge.net/LATEST_RELEASE" || true)
          fi
          echo "Downloading EdgeDriver version: ${DRIVER_VERSION}"
          URL="https://msedgedriver.azureedge.net/${DRIVER_VERSION}/edgedriver_linux64.zip"
          ZIP=edgedriver_linux64.zip
          for i in 1 2 3 4 5; do
            if wget -q --timeout=30 --tries=1 "$URL" -O "$ZIP"; then
              echo "Downloaded EdgeDriver on attempt $i"
              break
            fi
            echo "Attempt $i failed; retrying in 5s..."
            sleep 5
          done
          if [ ! -f "$ZIP" ]; then
            echo "ERROR: Failed to download EdgeDriver from $URL"
            exit 1
          fi
          unzip -q "$ZIP"
          chmod +x msedgedriver
          sudo mv msedgedriver /usr/local/bin/msedgedriver
          rm -f "$ZIP"
          msedgedriver --version || true

      - name: Display Browser and Driver Versions
        run: |
          if [ "${{ matrix.browser }}" == "chrome" ]; then
            google-chrome --version || google-chrome-stable --version || true
            chromedriver --version || true
          elif [ "${{ matrix.browser }}" == "firefox" ]; then
            firefox --version || true
            geckodriver --version || true
          elif [ "${{ matrix.browser }}" == "edge" ]; then
            microsoft-edge --version || msedge --version || true
            msedgedriver --version || true
          elif [ "${{ matrix.browser }}" == "safari" ]; then
            safaridriver --version || true
            sw_vers || true
          fi

      - name: Run Tests with Maven (${{ matrix.browser }})
        run: mvn clean test -Dmaven.test.failure.ignore=true -Dbrowser=${{ matrix.browser }} -Dheadless=true
        env:
          TESTRAIL_ENABLED: "true"
          TESTRAIL_URL: ${{ secrets.TESTRAIL_URL }}
          TESTRAIL_USER: ${{ secrets.TESTRAIL_USER }}
          TESTRAIL_API_KEY: ${{ secrets.TESTRAIL_API_KEY }}
          TESTRAIL_PROJECT_ID: ${{ secrets.TESTRAIL_PROJECT_ID }}
          TESTRAIL_RUN_ID: ${{ secrets.TESTRAIL_RUN_ID }}
          BASE_URL: ${{ secrets.BASE_URL }}
          BROWSER: ${{ matrix.browser }}

      - name: Show Failing Tests Summary
        if: always()
        run: |
          echo "---------------------------------------"
          echo "ðŸ§ª FAILED TEST SUMMARY for ${{ matrix.browser }}"
          echo "---------------------------------------"
          grep -i "FAILED" target/surefire-reports/*.txt || echo "âœ… No failed tests detected"
          echo "---------------------------------------"

      - name: Upload Test Reports (${{ matrix.browser }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-${{ matrix.browser }}-${{ matrix.os }}
          path: |
            reports/
            target/cucumber-reports/
            target/surefire-reports/
            target/extent-report/
          retention-days: 30

      - name: Upload Screenshots (${{ matrix.browser }})
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots-${{ matrix.browser }}-${{ matrix.os }}
          path: screenshots/
          retention-days: 7

  summary:
    name: Test Summary & Slack Notification
    runs-on: ubuntu-latest
    needs: [test]
    if: always()

    steps:
      - name: Display Summary
        run: |
          echo "ðŸŽ¯ All cross-browser test runs completed!"
          echo "Browsers covered: Chrome, Firefox, Edge, Safari"
          echo "âœ… Reports and screenshots uploaded."

      - name: Send Slack Notification
        if: always() && env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          WORKFLOW_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          STATUS: ${{ job.status }}
        run: |
          STATUS_EMOJI=":white_check_mark:"
          if [ "${STATUS}" != "success" ]; then
            STATUS_EMOJI=":x:"
          fi
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\": \"${STATUS_EMOJI} *CI AutoZen Pipeline with Cross-Browser Testing* \n
              *Repository:* ${GITHUB_REPOSITORY}\n
              *Branch:* ${GITHUB_REF_NAME}\n
              *Status:* ${STATUS}\n
              *Browsers:* Chrome, Firefox, Edge, Safari\n
              *Run URL:* ${WORKFLOW_URL}\" }" \
            $SLACK_WEBHOOK_URL
